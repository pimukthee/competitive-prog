/*
Alfonso2 Peterssen (mukel)
24 - 1 - 2009
SPOJ #3484 "Crossbits"
*/
#include <cstdio>
#include <iostream>
#include <algorithm>
#include <map>

using namespace std;

#define REP( i, n ) \
	for ( int i = 0; i < (n); i++ )

int N, K;
map< pair< int, int >, string > sol;

int main() {

	sol[ make_pair( 4, 1 ) ] = "0010100000010100";
	sol[ make_pair( 5, 1 ) ] = "0001000100100000000101000";
	sol[ make_pair( 6, 1 ) ] = "000010000100000001010000100000001000";
	sol[ make_pair( 6, 2 ) ] = "000110100100000011110000001001011000";
	sol[ make_pair( 7, 1 ) ] = "0000010000010000000010010000010000010000000001000";
	sol[ make_pair( 7, 2 ) ] = "0000110000110000000110100001110000010100000011000";
	sol[ make_pair( 7, 3 ) ] = "0001110001110010000111100001110000100111000110010";
	sol[ make_pair( 7, 4 ) ] = "0011110101110011000111100011110001100111010111100";
	sol[ make_pair( 8, 1 ) ] = "0000001000000100000000010010000001000000000010001000000000010000";
	sol[ make_pair( 8, 2 ) ] = "0000011000001100000000110010000101100000110000001001000000011000";
	sol[ make_pair( 8, 3 ) ] = "0000111000011100000010110100001111100000110000011011000000110100";
	sol[ make_pair( 8, 4 ) ] = "0001111000111100010010111100001111100001110000111011010000111100";
	sol[ make_pair( 8, 5 ) ] = "0011111010111100110010111110001111000111110100110011110101111100";
	sol[ make_pair( 9, 1 ) ] = "000000010000000100000000001000010000000001000001000000010000000100000000000100000";
	sol[ make_pair( 9, 2 ) ] = "000000110000001100000000011000010001000101000011000000110000000100010000001100000";
	sol[ make_pair( 9, 3 ) ] = "000001110000011100000001011000010011010100001111000000110010000101100000001100100";
	sol[ make_pair( 9, 4 ) ] = "000011110000111100000011011010010011111100000111000001110000011101100100001101100";
	sol[ make_pair( 9, 5 ) ] = "000111110001111100010011011110010011111100001111000101110010011101101100001101110";
	sol[ make_pair( 10, 1 ) ] = "0000000010000000010000000000010000010000000000100000010000000000100000010000000010000000000010000000";
	sol[ make_pair( 10, 2 ) ] = "0000000110000000110000000000110000010001000100100000110000000100010000110000000010001000000010100000";
	sol[ make_pair( 10, 3 ) ] = "0000001110000001110000000010110000010011000100010101110000001100010000110010000010101000000011100000";
	sol[ make_pair( 10, 4 ) ] = "0000011110000011110000000110110000110011010100001111110000001110000001110010100010110001000011100100";
	sol[ make_pair( 10, 5 ) ] = "0000111110000111110000001110110100110011111100000111110000011110000101110011001010110011000011001110";
	sol[ make_pair( 10, 6 ) ] = "0001111110001111110001001110111100110011111100001111110011001110000111110011001110110011010011111100";

	while ( (cin >> N) && N != 0 && (cin >> K) ) {
		typeof( sol.begin() ) it = sol.find( make_pair( N, K ) );
		string S;
		if ( it != sol.end() )
			S = (*it).second;
		else
		      S = string( 100, '0' );

		REP( i, N )
		REP( j, N )
			cout << S[i * N + j] << (char)((j < N - 1) ? ' ' : '\n');
	}

	return 0;
}
